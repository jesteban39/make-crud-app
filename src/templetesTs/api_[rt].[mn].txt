import {Router} from 'express'
import type {Request, Response} from 'express'
import {PkNotMache} from '@declarations/errors'
import {getModels} from '@db'
import statusCodes from '@config/statusCodes'

export const router = Router()

router.get('/', async (_req: Request, res: Response) => {
  const {<~Model~>} = getModels()
  const <~models~> = await <~Model~>.findAll()
  return res.status(statusCodes.OK).json(<~models~>)
})

router.get('/:uuid', async (req: Request, res: Response) => {
  const {<~Model~>} = getModels()
  const {uuid} = req.params
  const <~model~> = await <~Model~>.findByPk(uuid)
  if (!<~model~>) throw new PkNotMache(uuid)
  return res.status(statusCodes.OK).json(<~model~>)
})

router.post('/', async (req: Request, res: Response) => {
  const {<~Model~>} = getModels()
  const <~model~> = await <~Model~>.create(req.body)
  return res.status(statusCodes.OK).json(<~model~>)
})

router.put('/:uuid', async (req: Request, res: Response) => {
  const {<~Model~>} = getModels()
  const {uuid} = req.params
  const <~model~> = await <~Model~>.findByPk(uuid)
  if (!<~model~>) throw new PkNotMache(uuid)
  const new<~Model~> = await <~model~>.update({...req.body})
  return res.status(statusCodes.OK).json(new<~Model~>)
})

router.delete('/:uuid', async (req: Request, res: Response) => {
  const {<~Model~>} = getModels()
  const {uuid} = req.params
  const <~model~> = await <~Model~>.findByPk(parseInt(uuid))
  if (!<~model~>) throw new PkNotMache(uuid)
  const new<~Model~> = await <~model~>.destroy()
  return res.status(statusCodes.OK).json(new<~Model~>)
})

export default router
